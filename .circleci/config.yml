version: 2.0

commands:
  destroy_environ:
    description: destroy deployment ennvironment
    parameters:
      awsConfigStatus:
        type: enum
        default: "configured"
        enum: ["configured", "notconfigured"]
    steps:
      - run:
          name: destroy deployment environment
          when: on_fail
          command: |
            awsStatus=<parameters.awsConfigStatus>
            if [ $awsStatus == "notconfigured"]
              then
                # TODO: install awscli
                # TODO: configure awscli profile

            # TODO: destoy the environment starting from S3 resources  emptying
            # aws s3 rm s3://<backed_name>/resouce_name --recursive --force
            # TODO: destroy deployment stacks based on worflow ID
            # aws cloudformation destroy ----?

  make_migrations:
    description: make database migrations
    parameters:
      versionChanged:
        type: bool
        default: yes
    steps:
      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: install dependencies
          command: |
            make install -r test-requirements.txt
      - run:
          name: migrate databases
          command: |
            make migrations

  run_tests:
    description: >-
      Command to run database migrations and code tests
    steps:
      -  


jobs:
  tests:
    description: Analyze backend source code
    docker:
      - image: circleci/python:3.8.4
    # working_directory: ./
    steps:
      - checkout
      - run:
          name: create environment to run code analyze
          command: |
            # require virtural environ 
            make setup
      - run:
          name: install dependencies
          command: |
            make install
      - run:
          name: run code lints
          command: |
            # format the source code 
            make lint
      # - save_cache:
      #     paths:
      #       - ".venv"
      #       - "/usr/local/bin"
      #       - "/usr/local/lib/python3.6/site-packages"
      #     key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock"}}
  
  build:
    docker:
      - image: circleci/python:3.8.4
      - image: circleci/postgres:9.6.16-alpine
        environment:
          POSTGRES_USERNAME: postgres
          POSRGRES_PASSWORD: password
          POSTGRES_PORT: 5432
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOSTNAME: localhost
      FLASK_APP: "openhcs/app.py"
    steps:
      - checkout
      # - restore_cache:
      #     key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            sudo apt update 
            make install
      - run:
          name: run database migrartions tests
          command: |
            sudo apt-get install -y postgresql-client
            psql -h ${POSTGRES_HOSTNAME} -U ${POSTGRES_USERNAME} -d postgres -w -c "CREATE DATABASE subscribers OWNER=${POSTGRES_USERNAME} ENCODING=UTF8;"
            psql -h ${POSTGRES_HOSTNAME} -U ${POSTGRES_USERNAME} -d postgres -w -c "CREATE DATABASE profiles OWNER=${POSTGRES_USERNAME} ENCODING=UTF8;"
            psql -h ${POSTGRES_HOSTNAME} -U ${POSTGRES_USERNAME} -d postgres -w -c "CREATE DATABASE booking OWNER=${POSTGRES_USERNAME} ENCODING=UTF8;"
            psql -h ${POSTGRES_HOSTNAME} -U ${POSTGRES_USERNAME} -d postgres -w -c "CREATE DATABASE schedules OWNER=${POSTGRES_USERNAME} ENCODING=UTF8;"
            make migrations
      - run:
          name: run code tests 
          command: |
           make tests 

  # analyze:
  #   description: Analyze backend source code
  #   docker:
  #     - image: circleci/python:3.8.4
  #   # working_directory: ./ 
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: deps-{{ .Branch }}-{{ checksum "Pipefile.lock"}}
  #     - run:
  #         name: check dependecies for security vulnarability
  #         command: |
  #           pipenv shell
  #           pipenv check 


workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      # - tests
      
      
        
